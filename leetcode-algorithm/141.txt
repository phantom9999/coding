#include <iostream>
#include <fstream>
#include <algorithm>

using namespace std;

/**
 * Definition for singly-linked list.
 **/
struct ListNode {
    int val;
    ListNode *next;

    ListNode(int x) : val(x), next(NULL) { }
};

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (head == NULL) {
            return false;
        }
        ListNode *fast = head;
        ListNode *slow = head;
        bool isSame = false;
        while (fast != NULL && slow != NULL) {
            if (fast->next != NULL) {
                fast = fast->next;
                if (fast == slow) {
                    isSame = true;
                    break;
                } else {
                    if (fast->next != NULL) {
                        fast = fast->next;
                        if (fast == slow) {
                            isSame = true;
                            break;
                        }
                    } else {
                        break;
                    }
                }
            } else {
                break;
            }
            slow = slow->next;
        }
        return isSame;
    }
};


int main() {
    //ifstream cin("in.txt");

    ListNode *node = new ListNode(1);
    node->next = new ListNode(2);
    node->next->next = node;
    Solution so;
    bool result = so.hasCycle(node);
    cout << result << endl;



    return 0;
}