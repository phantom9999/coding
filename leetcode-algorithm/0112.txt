#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <stack>
#include <cmath>
#include <sstream>

using namespace std;


  struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };

class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if (root == nullptr) {
            return false;
        }
        return pathSum(root, sum);
    }

    bool pathSum(TreeNode* root, int sum) {
        if (root == nullptr) {
            return sum == 0;
        }
        sum -= root->val;
        if (root->left == nullptr && root->right == nullptr) {
            return sum == 0;
        } else if (root->left == nullptr) {
            return pathSum(root->right, sum);
        } else if (root->right == nullptr) {
            return pathSum(root->left, sum);
        } else {
            return pathSum(root->left, sum) || pathSum(root->right, sum);
        }
    }
};

int main() {
    Solution solution;
    TreeNode* root = new TreeNode(5);
    root->left = new TreeNode(4);
    root->right = new TreeNode(8);

    root->left->left = new TreeNode(11);
    root->right->left = new TreeNode(13);
    root->right->right = new TreeNode(4);

    root->left->left->left = new TreeNode(7);
    root->left->left->right = new TreeNode(2);
    root->right->right->right = new TreeNode(1);
    cout << solution.hasPathSum(root, 22);
}
